/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "My Blog",
  "description": "Just playing around",
  "base": "/vuepress-blog/",
  "headTags": [],
  "pages": [
    {
      "frontmatter": {},
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-0d1153ac",
      "path": "/"
    },
    {
      "title": "VScode",
      "frontmatter": {
        "meta": [
          {
            "title": "VScode",
            "time": "2019-06-20T10:20:10.000Z",
            "tag": "工具使用"
          }
        ]
      },
      "regularPath": "/blog/tool/VScode.html",
      "relativePath": "blog/tool/VScode.md",
      "key": "v-620c8935",
      "path": "/blog/tool/VScode.html",
      "headers": [
        {
          "level": 2,
          "title": "VScode 常用插件",
          "slug": "vscode-常用插件"
        },
        {
          "level": 2,
          "title": "修改插件默认安装位置",
          "slug": "修改插件默认安装位置"
        },
        {
          "level": 2,
          "title": "eslint 保存自动修复",
          "slug": "eslint-保存自动修复"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"vscode\"><a class=\"header-anchor\" href=\"#vscode\">#</a> VScode</h1>\n<h2 id=\"vscode-常用插件\"><a class=\"header-anchor\" href=\"#vscode-常用插件\">#</a> VScode 常用插件</h2>\n<ol>\n<li><code>Auto rename tag</code><br>\n修改 HTML 标签时，自动修改匹配的标签</li>\n<li><code>Color Highlight</code><br>\n颜色值在代码中高亮显示</li>\n<li><code>Beautify</code><br>\n代码格式化，包括：javascript, JSON, CSS, Sass, and HTML</li>\n</ol>\n"
    },
    {
      "title": "常用工具",
      "frontmatter": {
        "meta": [
          {
            "title": "常用工具",
            "time": "2020-06-28 8:2:41",
            "tag": "收藏"
          }
        ]
      },
      "regularPath": "/blog/tool/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html",
      "relativePath": "blog/tool/常用工具.md",
      "key": "v-0d827ab0",
      "path": "/blog/tool/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "GIf 相关",
          "slug": "gif-相关"
        }
      ],
      "excerpt": "<h1 id=\"常用工具\"><a class=\"header-anchor\" href=\"#常用工具\">#</a> 常用工具</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>对一些常用工具和便利的工具网站的记录。</p>\n"
    },
    {
      "title": "PC、移动端拖拽",
      "frontmatter": {
        "meta": [
          {
            "title": "PC、移动端拖拽",
            "time": "2020-04-23T19:19:28.000Z",
            "tag": "html"
          }
        ]
      },
      "regularPath": "/blog/web/PC%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8B%96%E6%8B%BD.html",
      "relativePath": "blog/web/PC、移动端拖拽.md",
      "key": "v-67b6f28f",
      "path": "/blog/web/PC%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8B%96%E6%8B%BD.html",
      "headers": [
        {
          "level": 2,
          "title": "H5 拖拽",
          "slug": "h5-拖拽"
        },
        {
          "level": 3,
          "title": "设置元素可拖动",
          "slug": "设置元素可拖动"
        },
        {
          "level": 3,
          "title": "拖拽事件",
          "slug": "拖拽事件"
        },
        {
          "level": 3,
          "title": "放置事件",
          "slug": "放置事件"
        },
        {
          "level": 3,
          "title": "拖拽过程中鼠标位置",
          "slug": "拖拽过程中鼠标位置"
        },
        {
          "level": 2,
          "title": "移动端拖拽",
          "slug": "移动端拖拽"
        },
        {
          "level": 3,
          "title": "相关事件",
          "slug": "相关事件"
        },
        {
          "level": 3,
          "title": "触摸点",
          "slug": "触摸点"
        },
        {
          "level": 3,
          "title": "触摸点位置",
          "slug": "触摸点位置"
        }
      ],
      "excerpt": "<h1 id=\"pc、移动端拖拽\"><a class=\"header-anchor\" href=\"#pc、移动端拖拽\">#</a> PC、移动端拖拽</h1>\n<h2 id=\"h5-拖拽\"><a class=\"header-anchor\" href=\"#h5-拖拽\">#</a> H5 拖拽</h2>\n<h3 id=\"设置元素可拖动\"><a class=\"header-anchor\" href=\"#设置元素可拖动\">#</a> 设置元素可拖动</h3>\n<p>设置拖拽属性<code>draggable=&quot;true&quot;</code>。</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">draggable</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "VuePress 个人博客填坑",
      "frontmatter": {
        "meta": [
          {
            "title": "VuePress 个人博客填坑",
            "time": "2019-06-20T18:30:16.000Z",
            "tag": "VuePress"
          }
        ]
      },
      "regularPath": "/blog/web/VuePress%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%A1%AB%E5%9D%91.html",
      "relativePath": "blog/web/VuePress 个人博客填坑.md",
      "key": "v-407b253a",
      "path": "/blog/web/VuePress%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%A1%AB%E5%9D%91.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "VuePress 介绍",
          "slug": "vuepress-介绍"
        },
        {
          "level": 2,
          "title": "VuePress 使用",
          "slug": "vuepress-使用"
        },
        {
          "level": 3,
          "title": "文档目录",
          "slug": "文档目录"
        },
        {
          "level": 3,
          "title": "基本配置",
          "slug": "基本配置"
        },
        {
          "level": 2,
          "title": "博客",
          "slug": "博客"
        },
        {
          "level": 3,
          "title": "博客构建",
          "slug": "博客构建"
        },
        {
          "level": 3,
          "title": "博客部署",
          "slug": "博客部署"
        },
        {
          "level": 2,
          "title": "遇到的问题！！！",
          "slug": "遇到的问题！！！"
        },
        {
          "level": 3,
          "title": "路由和目录",
          "slug": "路由和目录"
        },
        {
          "level": 3,
          "title": "应用级别配置（增加额外的路由）【未解决】",
          "slug": "应用级别配置（增加额外的路由）【未解决】"
        },
        {
          "level": 3,
          "title": "有关 computed 属性的问题",
          "slug": "有关-computed-属性的问题"
        }
      ],
      "excerpt": "<h1 id=\"vuepress-个人博客填坑\"><a class=\"header-anchor\" href=\"#vuepress-个人博客填坑\">#</a> VuePress 个人博客填坑</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>经过几天的努力，自己的个人博客终于大致做好了，最开始也参考了很多别人的博客布局，但做到后面发现静态博客不适合做得那么花哨。</p>\n<p>也想过为每一篇博客配上一张封面图，但发现在不同屏幕下，图片的显示方式不好管理，对图片的内容和分辨率也都有一定规定，就没有去弄了。</p>\n<p>过程也遇到了许多坑，做一个总结~~~</p>\n"
    },
    {
      "title": "node 与 npm",
      "frontmatter": {
        "meta": [
          {
            "title": "node与npm",
            "time": "2019-06-19T16:33:55.000Z",
            "tag": "环境搭建,工具使用"
          }
        ]
      },
      "regularPath": "/blog/tool/node%E5%92%8Cnpm.html",
      "relativePath": "blog/tool/node和npm.md",
      "key": "v-815124bc",
      "path": "/blog/tool/node%E5%92%8Cnpm.html",
      "headers": [
        {
          "level": 2,
          "title": "一 下载",
          "slug": "一-下载"
        },
        {
          "level": 2,
          "title": "二 安装",
          "slug": "二-安装"
        },
        {
          "level": 2,
          "title": "三 自定义全局包安装路径",
          "slug": "三-自定义全局包安装路径"
        },
        {
          "level": 2,
          "title": "四 安装 cnpm",
          "slug": "四-安装-cnpm"
        },
        {
          "level": 2,
          "title": "五 npm 常用命令",
          "slug": "五-npm-常用命令"
        },
        {
          "level": 3,
          "title": "1. 安装",
          "slug": "_1-安装"
        },
        {
          "level": 3,
          "title": "2. 更新",
          "slug": "_2-更新"
        },
        {
          "level": 3,
          "title": "3. 卸载",
          "slug": "_3-卸载"
        },
        {
          "level": 3,
          "title": "4. --save 和--save-dev 的区别",
          "slug": "_4-save-和-save-dev-的区别"
        },
        {
          "level": 2,
          "title": "git 更改 Windows 下默认编辑器",
          "slug": "git-更改-windows-下默认编辑器"
        },
        {
          "level": 2,
          "title": "git 配置 ssh",
          "slug": "git-配置-ssh"
        }
      ],
      "excerpt": "<h1 id=\"node-与-npm\"><a class=\"header-anchor\" href=\"#node-与-npm\">#</a> node 与 npm</h1>\n<h2 id=\"一-下载\"><a class=\"header-anchor\" href=\"#一-下载\">#</a> 一 下载</h2>\n<p>打开<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener noreferrer\">node 官网下载链接<OutboundLink/></a>，下载自己需要的 node 安装包，由于我的电脑是 Windows，所以我下载的是 windows 下的安装包\n<img src=\"https://fireli-1256465711.cos.ap-chengdu.myqcloud.com/img/1560931065098.png\" alt=\"\"></p>\n"
    },
    {
      "title": "babel7 简单使用总结",
      "frontmatter": {
        "meta": [
          {
            "title": "babel7 简单使用总结",
            "time": "2019-12-14T09:38:32.000Z",
            "tag": "babel,总结"
          }
        ]
      },
      "regularPath": "/blog/web/babel7%E9%85%8D%E7%BD%AE.html",
      "relativePath": "blog/web/babel7配置.md",
      "key": "v-63a7a701",
      "path": "/blog/web/babel7%E9%85%8D%E7%BD%AE.html",
      "headers": [
        {
          "level": 2,
          "title": "webpack 中使用",
          "slug": "webpack-中使用"
        },
        {
          "level": 2,
          "title": "vue-cli3",
          "slug": "vue-cli3"
        },
        {
          "level": 2,
          "title": "参考资料",
          "slug": "参考资料"
        }
      ],
      "excerpt": "<h1 id=\"babel7-简单使用总结\"><a class=\"header-anchor\" href=\"#babel7-简单使用总结\">#</a> babel7 简单使用总结</h1>\n<h2 id=\"webpack-中使用\"><a class=\"header-anchor\" href=\"#webpack-中使用\">#</a> webpack 中使用</h2>\n<p>安装 <code>@babel/preset-env</code> 以及 <code>core-js</code></p>\n<p>在 <code>package.json</code> 文件所在目录新建 <code>babel.config.js</code>文件</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        useBuiltIns<span class=\"token operator\">:</span> <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">,</span>\n        corejs<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        targets<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 目标浏览器版本，该浏览器缺失某新语法，babel才会引入这个新语法</span>\n          ie<span class=\"token operator\">:</span> <span class=\"token number\">11</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "canvas 保存下载图片",
      "frontmatter": {
        "meta": [
          {
            "title": "canvas保存下载图片",
            "time": "2020-03-15T09:38:32.000Z",
            "tag": "图片下载,canvas"
          }
        ]
      },
      "regularPath": "/blog/web/canvas%E4%BF%9D%E5%AD%98%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87.html",
      "relativePath": "blog/web/canvas保存下载图片.md",
      "key": "v-d839e64a",
      "path": "/blog/web/canvas%E4%BF%9D%E5%AD%98%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "canvas 转化为图片",
          "slug": "canvas-转化为图片"
        },
        {
          "level": 2,
          "title": "canvas 与 retina 屏",
          "slug": "canvas-与-retina-屏"
        },
        {
          "level": 2,
          "title": "html2canvas",
          "slug": "html2canvas"
        },
        {
          "level": 2,
          "title": "下载图片",
          "slug": "下载图片"
        },
        {
          "level": 2,
          "title": "Blob 对象",
          "slug": "blob-对象"
        },
        {
          "level": 2,
          "title": "data URL 和 Blob 转换",
          "slug": "data-url-和-blob-转换"
        },
        {
          "level": 2,
          "title": "URL.createObjectURL()",
          "slug": "url-createobjecturl"
        },
        {
          "level": 2,
          "title": "IE 10",
          "slug": "ie-10"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "问题",
          "slug": "问题"
        },
        {
          "level": 2,
          "title": "参考资料：",
          "slug": "参考资料："
        }
      ],
      "excerpt": "<h1 id=\"canvas-保存下载图片\"><a class=\"header-anchor\" href=\"#canvas-保存下载图片\">#</a> canvas 保存下载图片</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在项目中遇到了截取屏幕区域，并转化为图片下载的问题，这里做一个小小的总结，主要包括以下几个内容：</p>\n<ol>\n<li><code>dom</code> 节点通过 <code>html2canvas</code> 转化为 <code>canvas</code></li>\n<li><code>canvas</code> 转化图片</li>\n<li>图片通过 <code>a</code> 标签下载</li>\n</ol>\n"
    },
    {
      "title": "div宽高等比例自适应",
      "frontmatter": {
        "meta": [
          {
            "title": "div宽高等比例自适应",
            "time": "2019-06-22T09:13:38.000Z",
            "tag": "html,布局"
          }
        ]
      },
      "regularPath": "/blog/web/div%E5%AE%BD%E9%AB%98%E7%AD%89%E6%AF%94%E4%BE%8B%E8%87%AA%E9%80%82%E5%BA%94.html",
      "relativePath": "blog/web/div宽高等比例自适应.md",
      "key": "v-3307c5a5",
      "path": "/blog/web/div%E5%AE%BD%E9%AB%98%E7%AD%89%E6%AF%94%E4%BE%8B%E8%87%AA%E9%80%82%E5%BA%94.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "js控制法",
          "slug": "js控制法"
        },
        {
          "level": 2,
          "title": "padding补充法",
          "slug": "padding补充法"
        },
        {
          "level": 3,
          "title": "原理",
          "slug": "原理"
        },
        {
          "level": 3,
          "title": "实现",
          "slug": "实现"
        },
        {
          "level": 3,
          "title": "存在问题",
          "slug": "存在问题"
        },
        {
          "level": 2,
          "title": "使用 vw + @media",
          "slug": "使用-vw-media"
        },
        {
          "level": 2,
          "title": "动态设置 rem + @media",
          "slug": "动态设置-rem-media"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "拓展：padding-bottom（或padding-top）的其他用处",
          "slug": "拓展：padding-bottom（或padding-top）的其他用处"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"div宽高等比例自适应\"><a class=\"header-anchor\" href=\"#div宽高等比例自适应\">#</a> div宽高等比例自适应</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>需要实现这样一个效果，div的宽高成比例，例如：宽:高=1:1。</p>\n<ol>\n<li>当窗口宽度大于<code>500px</code>时，div宽度为<code>500px</code></li>\n<li>当窗口宽度小于<code>500px</code>时，div宽度自适应屏幕</li>\n</ol>\n<p>主要的方法有js控制、<code>padding-bottom</code>补充、vw、rem，<code>padding-bottom</code>设定为百分比时，真是一个神奇的属性。</p>\n"
    },
    {
      "title": "js 模块导入导出",
      "frontmatter": {
        "meta": [
          {
            "title": "js 模块导入导出",
            "time": "2020-01-09T09:38:32.000Z",
            "tag": "js,模块"
          }
        ]
      },
      "regularPath": "/blog/web/js%20%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA.html",
      "relativePath": "blog/web/js 模块导入导出.md",
      "key": "v-6e6d6107",
      "path": "/blog/web/js%20%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "ES6 模块与 CommonJS 模块的差异",
          "slug": "es6-模块与-commonjs-模块的差异"
        },
        {
          "level": 2,
          "title": "模块加载",
          "slug": "模块加载"
        },
        {
          "level": 3,
          "title": "浏览器加载",
          "slug": "浏览器加载"
        },
        {
          "level": 3,
          "title": "Node 加载 ES6 模块",
          "slug": "node-加载-es6-模块"
        },
        {
          "level": 2,
          "title": "webpack 模块",
          "slug": "webpack-模块"
        },
        {
          "level": 3,
          "title": "导出模块",
          "slug": "导出模块"
        },
        {
          "level": 3,
          "title": "引入模块",
          "slug": "引入模块"
        },
        {
          "level": 3,
          "title": "require 引入 es6 模块",
          "slug": "require-引入-es6-模块"
        },
        {
          "level": 3,
          "title": "UI 库的按需加载原理",
          "slug": "ui-库的按需加载原理"
        },
        {
          "level": 2,
          "title": "es6 模块语法",
          "slug": "es6-模块语法"
        },
        {
          "level": 3,
          "title": "export",
          "slug": "export"
        },
        {
          "level": 3,
          "title": "import",
          "slug": "import"
        },
        {
          "level": 2,
          "title": "参考资料",
          "slug": "参考资料"
        }
      ],
      "excerpt": "<h1 id=\"js-模块导入导出\"><a class=\"header-anchor\" href=\"#js-模块导入导出\">#</a> js 模块导入导出</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>模块导出导入，现在有主要是两种方法：</p>\n<ol>\n<li>es6: export 和 import</li>\n<li>commonjs: module.exports（exports）和 require</li>\n</ol>\n<p>一直在稀里糊涂的用，知道一些区别，但又有很多不明白的地方，经过查阅各种资料后作一个总结。</p>\n"
    },
    {
      "title": "vue 中使用 EChart",
      "frontmatter": {
        "meta": [
          {
            "title": "vue中使用EChart",
            "time": "2020-04-02T09:38:32.000Z",
            "tag": "vue,echart"
          }
        ]
      },
      "regularPath": "/blog/web/vue%E4%B8%AD%E4%BD%BF%E7%94%A8EChart.html",
      "relativePath": "blog/web/vue中使用EChart.md",
      "key": "v-64d37a69",
      "path": "/blog/web/vue%E4%B8%AD%E4%BD%BF%E7%94%A8EChart.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "引入 Echart",
          "slug": "引入-echart"
        },
        {
          "level": 2,
          "title": "引入自定义主题",
          "slug": "引入自定义主题"
        },
        {
          "level": 2,
          "title": "坐标轴和数据",
          "slug": "坐标轴和数据"
        },
        {
          "level": 2,
          "title": "获得图例高度（横向布局）",
          "slug": "获得图例高度（横向布局）"
        },
        {
          "level": 2,
          "title": "图表高度自适应图例行数",
          "slug": "图表高度自适应图例行数"
        },
        {
          "level": 2,
          "title": "柱状图为每根柱条设置不同颜色",
          "slug": "柱状图为每根柱条设置不同颜色"
        },
        {
          "level": 2,
          "title": "封装带有默认样式的 chart 组件",
          "slug": "封装带有默认样式的-chart-组件"
        },
        {
          "level": 2,
          "title": "vue-echarts 显隐问题",
          "slug": "vue-echarts-显隐问题"
        },
        {
          "level": 2,
          "title": "事件",
          "slug": "事件"
        },
        {
          "level": 3,
          "title": "鼠标事件",
          "slug": "鼠标事件"
        },
        {
          "level": 3,
          "title": "ZRender 事件",
          "slug": "zrender-事件"
        },
        {
          "level": 2,
          "title": "dispatch 事件",
          "slug": "dispatch-事件"
        },
        {
          "level": 2,
          "title": "dataZoom 问题",
          "slug": "datazoom-问题"
        }
      ],
      "excerpt": "<h1 id=\"vue-中使用-echart\"><a class=\"header-anchor\" href=\"#vue-中使用-echart\">#</a> vue 中使用 EChart</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在 vue 中使用 <code>echarts</code>，遇到了许许多多的问题，这里总结了一下如何配置 <code>vue-echarts</code> 组件，以及一些使用 <code>echarts</code> 过程遇到的问题和解决方案。</p>\n"
    },
    {
      "title": "js 知识点",
      "frontmatter": {
        "meta": [
          {
            "title": "js 知识点",
            "time": "2019-8-20 8:2:41",
            "tag": "js"
          }
        ]
      },
      "regularPath": "/blog/web/js%20%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "relativePath": "blog/web/js 知识点.md",
      "key": "v-01ad53cb",
      "path": "/blog/web/js%20%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "if 语句判断",
          "slug": "if-语句判断"
        },
        {
          "level": 3,
          "title": "判断真假",
          "slug": "判断真假"
        },
        {
          "level": 3,
          "title": "判断空对象空数组",
          "slug": "判断空对象空数组"
        },
        {
          "level": 2,
          "title": "隐式转换",
          "slug": "隐式转换"
        },
        {
          "level": 3,
          "title": "转换规则",
          "slug": "转换规则"
        },
        {
          "level": 3,
          "title": "ToBoolean",
          "slug": "toboolean"
        },
        {
          "level": 3,
          "title": "ToNumber",
          "slug": "tonumber"
        },
        {
          "level": 3,
          "title": "ToString",
          "slug": "tostring"
        },
        {
          "level": 3,
          "title": "ToPrimitive",
          "slug": "toprimitive"
        },
        {
          "level": 3,
          "title": "valueOf 和 toString",
          "slug": "valueof-和-tostring"
        },
        {
          "level": 3,
          "title": "其他隐式转换",
          "slug": "其他隐式转换"
        },
        {
          "level": 2,
          "title": "parseInt、isNaN 和 Number 注意点",
          "slug": "parseint、isnan-和-number-注意点"
        },
        {
          "level": 3,
          "title": "parseInt",
          "slug": "parseint"
        },
        {
          "level": 3,
          "title": "Number",
          "slug": "number"
        },
        {
          "level": 3,
          "title": "Number 和 parseInt 区别",
          "slug": "number-和-parseint-区别"
        },
        {
          "level": 3,
          "title": "isNaN",
          "slug": "isnan"
        }
      ],
      "excerpt": "<h1 id=\"js-知识点\"><a class=\"header-anchor\" href=\"#js-知识点\">#</a> js 知识点</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>实时记录在使用 <code>js</code> 过程中遇到的问题和学习到的新知识点。</p>\n"
    },
    {
      "title": "vue 路由动画和缓存",
      "frontmatter": {
        "meta": [
          {
            "title": "vue路由动画和缓存",
            "time": "2020-02-05T18:38:32.000Z",
            "tag": "vue"
          }
        ]
      },
      "regularPath": "/blog/web/vue%E8%B7%AF%E7%94%B1%E5%8A%A8%E7%94%BB%E5%92%8C%E7%BC%93%E5%AD%98.html",
      "relativePath": "blog/web/vue路由动画和缓存.md",
      "key": "v-7d8d473e",
      "path": "/blog/web/vue%E8%B7%AF%E7%94%B1%E5%8A%A8%E7%94%BB%E5%92%8C%E7%BC%93%E5%AD%98.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "路由动画",
          "slug": "路由动画"
        },
        {
          "level": 3,
          "title": "如何动画",
          "slug": "如何动画"
        },
        {
          "level": 3,
          "title": "动态过渡",
          "slug": "动态过渡"
        },
        {
          "level": 2,
          "title": "路由缓存",
          "slug": "路由缓存"
        },
        {
          "level": 3,
          "title": "缓存特定路由",
          "slug": "缓存特定路由"
        },
        {
          "level": 3,
          "title": "动态缓存",
          "slug": "动态缓存"
        },
        {
          "level": 3,
          "title": "全局管理缓存",
          "slug": "全局管理缓存"
        },
        {
          "level": 2,
          "title": "同时动画和缓存",
          "slug": "同时动画和缓存"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"vue-路由动画和缓存\"><a class=\"header-anchor\" href=\"#vue-路由动画和缓存\">#</a> vue 路由动画和缓存</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在使用 vue 路由动画和缓存时，遇到了一些问题，比如：</p>\n<ol>\n<li>正确产生动画；</li>\n<li>有条件产生动画，比如 A 页面到 B 页面使用动画，A 到其他页面不使用动画；</li>\n<li>有条件缓存，管理缓存</li>\n<li>动画和缓存的同时使用</li>\n</ol>\n<p>在这里把自己能想到的做一个总结。</p>\n"
    },
    {
      "title": "优化 moment 打包",
      "frontmatter": {
        "meta": [
          {
            "title": "优化moment打包",
            "time": "2020-03-04T16:56:30.000Z",
            "tag": "moment"
          }
        ]
      },
      "regularPath": "/blog/web/%E4%BC%98%E5%8C%96moment%E6%89%93%E5%8C%85.html",
      "relativePath": "blog/web/优化moment打包.md",
      "key": "v-c392a398",
      "path": "/blog/web/%E4%BC%98%E5%8C%96moment%E6%89%93%E5%8C%85.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "You-Dont-Need-Momentjs 插件",
          "slug": "you-dont-need-momentjs-插件"
        },
        {
          "level": 2,
          "title": "webpack-bundle-analyzer 插件",
          "slug": "webpack-bundle-analyzer-插件"
        },
        {
          "level": 2,
          "title": "优化 moment 打包",
          "slug": "优化-moment-打包-2"
        },
        {
          "level": 3,
          "title": "webpack 插件：IgnorePlugin",
          "slug": "webpack-插件：ignoreplugin"
        },
        {
          "level": 3,
          "title": "webpack 插件：ContextReplacementPlugin",
          "slug": "webpack-插件：contextreplacementplugin"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"优化-moment-打包\"><a class=\"header-anchor\" href=\"#优化-moment-打包\">#</a> 优化 moment 打包</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>这几天接到任务：将 <code>moment</code> 替换为 <code>dayjs</code> 来减少打包体积。</p>\n<p><img src=\"https://fireli-1256465711.cos.ap-chengdu.myqcloud.com/img/1583317035063.png\" alt=\"enter description here\"></p>\n<p>可以发现<code>moment</code>确实是比<code>dayjs</code>大很多。即使压缩后也有 <code>69.6k</code>，而<code>dayjs</code>只有几 <code>kb</code> 大小。</p>\n"
    },
    {
      "title": "元素大小、位置、滚动相关知识点",
      "frontmatter": {
        "meta": [
          {
            "title": "元素大小、位置、滚动相关知识点",
            "time": "2019-09-13T19:19:28.000Z",
            "tag": "html"
          }
        ]
      },
      "regularPath": "/blog/web/%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8F%E3%80%81%E4%BD%8D%E7%BD%AE%E3%80%81%E6%BB%9A%E5%8A%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "relativePath": "blog/web/元素大小、位置、滚动相关知识点.md",
      "key": "v-10e6348e",
      "path": "/blog/web/%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8F%E3%80%81%E4%BD%8D%E7%BD%AE%E3%80%81%E6%BB%9A%E5%8A%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "headers": [
        {
          "level": 2,
          "title": "元素大小",
          "slug": "元素大小"
        },
        {
          "level": 3,
          "title": "style.width 和 style.height",
          "slug": "style-width-和-style-height"
        },
        {
          "level": 3,
          "title": "offsetWidth 和 offsetHeight",
          "slug": "offsetwidth-和-offsetheight"
        },
        {
          "level": 3,
          "title": "clientWidth 和 clientHeight",
          "slug": "clientwidth-和-clientheight"
        },
        {
          "level": 3,
          "title": "scrollWidth 和 scrolltHeight",
          "slug": "scrollwidth-和-scrolltheight"
        },
        {
          "level": 3,
          "title": "屏幕宽高",
          "slug": "屏幕宽高"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 3,
          "title": "判断是否有滚动条",
          "slug": "判断是否有滚动条"
        },
        {
          "level": 2,
          "title": "元素 CSS 样式",
          "slug": "元素-css-样式"
        },
        {
          "level": 3,
          "title": "style",
          "slug": "style"
        },
        {
          "level": 3,
          "title": "getComputedStyle",
          "slug": "getcomputedstyle"
        },
        {
          "level": 3,
          "title": "currentStyle",
          "slug": "currentstyle"
        },
        {
          "level": 3,
          "title": "其他",
          "slug": "其他"
        },
        {
          "level": 2,
          "title": "元素位置",
          "slug": "元素位置"
        },
        {
          "level": 3,
          "title": "offsetLeft 和 offsetTop",
          "slug": "offsetleft-和-offsettop"
        },
        {
          "level": 3,
          "title": "element.getBoundingClientRect()",
          "slug": "element-getboundingclientrect"
        },
        {
          "level": 3,
          "title": "元素的绝对位置",
          "slug": "元素的绝对位置"
        },
        {
          "level": 3,
          "title": "相对位置",
          "slug": "相对位置"
        },
        {
          "level": 2,
          "title": "滚动条",
          "slug": "滚动条"
        },
        {
          "level": 3,
          "title": "scrollTop 和 scrollLeft",
          "slug": "scrolltop-和-scrollleft"
        },
        {
          "level": 3,
          "title": "pageXOffset 和 pageYOffset",
          "slug": "pagexoffset-和-pageyoffset"
        },
        {
          "level": 3,
          "title": "scrollTo 、scroll 和 scrollBy",
          "slug": "scrollto-、scroll-和-scrollby"
        },
        {
          "level": 3,
          "title": "ScrollToOptions",
          "slug": "scrolltooptions"
        },
        {
          "level": 3,
          "title": "scrollIntoView",
          "slug": "scrollintoview"
        }
      ],
      "excerpt": "<h1 id=\"元素大小、位置、滚动相关知识点\"><a class=\"header-anchor\" href=\"#元素大小、位置、滚动相关知识点\">#</a> 元素大小、位置、滚动相关知识点</h1>\n<h2 id=\"元素大小\"><a class=\"header-anchor\" href=\"#元素大小\">#</a> 元素大小</h2>\n<h3 id=\"style-width-和-style-height\"><a class=\"header-anchor\" href=\"#style-width-和-style-height\">#</a> style.width 和 style.height</h3>\n<ol>\n<li>返回元素设置的宽、高</li>\n<li>需要是在内嵌的 style 中设置 width 和 height 的值</li>\n<li>是一个带<code>px</code>字符串</li>\n</ol>\n"
    },
    {
      "title": "vue 组件通信总结",
      "frontmatter": {
        "meta": [
          {
            "title": "vue组件通信总结",
            "time": "2019-07-16T09:38:32.000Z",
            "tag": "vue"
          }
        ]
      },
      "regularPath": "/blog/web/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93.html",
      "relativePath": "blog/web/vue组件通信总结.md",
      "key": "v-a706545e",
      "path": "/blog/web/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93.html",
      "headers": [
        {
          "level": 2,
          "title": "路由传参",
          "slug": "路由传参"
        },
        {
          "level": 3,
          "title": "通过 params",
          "slug": "通过-params"
        },
        {
          "level": 3,
          "title": "通过 query",
          "slug": "通过-query"
        },
        {
          "level": 3,
          "title": "小结",
          "slug": "小结"
        },
        {
          "level": 2,
          "title": "组件通信",
          "slug": "组件通信"
        },
        {
          "level": 3,
          "title": "子组件访问父组件",
          "slug": "子组件访问父组件"
        },
        {
          "level": 3,
          "title": "父组件访问子组件",
          "slug": "父组件访问子组件"
        },
        {
          "level": 3,
          "title": "任意组件通信",
          "slug": "任意组件通信"
        },
        {
          "level": 3,
          "title": "小结",
          "slug": "小结-2"
        },
        {
          "level": 2,
          "title": "localStorage 和 SessionStorage",
          "slug": "localstorage-和-sessionstorage"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "excerpt": "<h1 id=\"vue-组件通信总结\"><a class=\"header-anchor\" href=\"#vue-组件通信总结\">#</a> vue 组件通信总结</h1>\n<h2 id=\"路由传参\"><a class=\"header-anchor\" href=\"#路由传参\">#</a> 路由传参</h2>\n<h3 id=\"通过-params\"><a class=\"header-anchor\" href=\"#通过-params\">#</a> 通过 params</h3>\n<h4 id=\"_1-动态路由\"><a class=\"header-anchor\" href=\"#_1-动态路由\">#</a> 1. 动态路由</h4>\n<p>定义一个动态路由，传递参数 <code>id</code></p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/componentB/:id\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"componentB\"</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> componentB\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "全屏和横竖屏",
      "frontmatter": {
        "meta": [
          {
            "title": "全屏和横竖屏",
            "time": "2020-05-05T10:41:39.000Z",
            "tag": "html"
          }
        ]
      },
      "regularPath": "/blog/web/%E5%85%A8%E5%B1%8F%E5%92%8C%E6%A8%AA%E7%AB%96%E5%B1%8F.html",
      "relativePath": "blog/web/全屏和横竖屏.md",
      "key": "v-61a8155e",
      "path": "/blog/web/%E5%85%A8%E5%B1%8F%E5%92%8C%E6%A8%AA%E7%AB%96%E5%B1%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "横屏",
          "slug": "横屏"
        },
        {
          "level": 3,
          "title": "判断横向",
          "slug": "判断横向"
        },
        {
          "level": 3,
          "title": "只能横屏",
          "slug": "只能横屏"
        },
        {
          "level": 2,
          "title": "全屏",
          "slug": "全屏"
        },
        {
          "level": 3,
          "title": "进入全屏",
          "slug": "进入全屏"
        },
        {
          "level": 3,
          "title": "退出全屏",
          "slug": "退出全屏"
        },
        {
          "level": 3,
          "title": "成功失败事件",
          "slug": "成功失败事件"
        },
        {
          "level": 2,
          "title": "移动端全屏",
          "slug": "移动端全屏"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"全屏和横竖屏\"><a class=\"header-anchor\" href=\"#全屏和横竖屏\">#</a> 全屏和横竖屏</h1>\n<h2 id=\"横屏\"><a class=\"header-anchor\" href=\"#横屏\">#</a> 横屏</h2>\n<h3 id=\"判断横向\"><a class=\"header-anchor\" href=\"#判断横向\">#</a> 判断横向</h3>\n<p>有些页面要求在横屏和竖屏下有不同的显示，这时候一般会设置 2 套 css，一套用于横屏一套用于竖屏。</p>\n<p>手机的横屏实际是由系统控制的：</p>\n<p><img src=\"https://fireli-1256465711.cos.ap-chengdu.myqcloud.com/img/1584333134862.png\" alt=\"enter description here\"></p>\n<p>当<code>方向锁定</code>关闭后，网页在横向手持设备时就会横向显示。</p>\n<p>判断是横屏还是竖屏可以采用<code>window.orientation</code>。它返回一个与默认屏幕方向偏离的角度值：</p>\n<ol>\n<li>0：代表此时是默认屏幕方向</li>\n<li>90：代表顺时针偏离默认屏幕方向 90 度</li>\n<li>-90：代表逆时针偏离默认屏幕方向 90 度</li>\n<li>180：代表偏离默认屏幕方向 180 度</li>\n</ol>\n<p>需要注意的是，<code>0</code>只是代表默认方向，如果是平板电脑，那默认方向就是横屏。</p>\n"
    },
    {
      "title": "实现完美的深度克隆",
      "frontmatter": {
        "meta": [
          {
            "title": "实现完美的深度克隆",
            "time": "2019-08-10T11:33:29.000Z",
            "tag": "js"
          }
        ]
      },
      "regularPath": "/blog/web/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E9%9C%80%E8%A6%81%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "relativePath": "blog/web/实现一个深度克隆需要的知识点.md",
      "key": "v-6347c49c",
      "path": "/blog/web/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E9%9C%80%E8%A6%81%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "js 数据类型",
          "slug": "js-数据类型"
        },
        {
          "level": 2,
          "title": "判断对象类型",
          "slug": "判断对象类型"
        },
        {
          "level": 3,
          "title": "typeof",
          "slug": "typeof"
        },
        {
          "level": 3,
          "title": "instanceof",
          "slug": "instanceof"
        },
        {
          "level": 3,
          "title": "constructor",
          "slug": "constructor"
        },
        {
          "level": 3,
          "title": "Object.prototype.toString.call",
          "slug": "object-prototype-tostring-call"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "实现一个深克隆方法",
          "slug": "实现一个深克隆方法"
        },
        {
          "level": 3,
          "title": "深拷贝正则对象",
          "slug": "深拷贝正则对象"
        },
        {
          "level": 3,
          "title": "深拷贝 Date 对象",
          "slug": "深拷贝-date-对象"
        },
        {
          "level": 3,
          "title": "深拷贝 Symbol",
          "slug": "深拷贝-symbol"
        },
        {
          "level": 3,
          "title": "深克隆 Set",
          "slug": "深克隆-set"
        },
        {
          "level": 3,
          "title": "深拷贝 Map 对象",
          "slug": "深拷贝-map-对象"
        },
        {
          "level": 3,
          "title": "深拷贝构造函数创建的实例",
          "slug": "深拷贝构造函数创建的实例"
        },
        {
          "level": 3,
          "title": "处理对象循环引用",
          "slug": "处理对象循环引用"
        },
        {
          "level": 3,
          "title": "深拷贝函数",
          "slug": "深拷贝函数"
        },
        {
          "level": 3,
          "title": "完整的深克隆方法",
          "slug": "完整的深克隆方法"
        },
        {
          "level": 2,
          "title": "其它",
          "slug": "其它"
        },
        {
          "level": 3,
          "title": "广度优先的深拷贝函数",
          "slug": "广度优先的深拷贝函数"
        },
        {
          "level": 3,
          "title": "非递归深拷贝函数",
          "slug": "非递归深拷贝函数"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"实现完美的深度克隆\"><a class=\"header-anchor\" href=\"#实现完美的深度克隆\">#</a> 实现完美的深度克隆</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>深克隆简单对象，一般就是深度遍历，然后将不是对象的属性一一赋值。但对象的种类有很多种，比如 <code>Date</code>、<code>Set</code>、<code>Promise</code> 和 <code>Function</code> 等等，这些再深度遍历一一赋值，明显行不通，需要一一考虑这些情况，作特殊处理。</p>\n"
    },
    {
      "title": "循环、迭代、属性的特性与属性方法",
      "frontmatter": {
        "meta": [
          {
            "title": "循环、迭代、属性特性与属性方法",
            "time": "2019-08-14T07:50:44.000Z",
            "tag": "js"
          }
        ]
      },
      "regularPath": "/blog/web/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%B1%9E%E6%80%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95.html",
      "relativePath": "blog/web/循环、迭代、属性特性与属性方法.md",
      "key": "v-513d63d9",
      "path": "/blog/web/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E5%B1%9E%E6%80%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95.html",
      "headers": [
        {
          "level": 2,
          "title": "遍历相关",
          "slug": "遍历相关"
        },
        {
          "level": 3,
          "title": "for 循环",
          "slug": "for-循环"
        },
        {
          "level": 3,
          "title": "forEach",
          "slug": "foreach"
        },
        {
          "level": 3,
          "title": "for in",
          "slug": "for-in"
        },
        {
          "level": 3,
          "title": "for of",
          "slug": "for-of"
        },
        {
          "level": 3,
          "title": "Object.keys()",
          "slug": "object-keys"
        },
        {
          "level": 3,
          "title": "Object.values()",
          "slug": "object-values"
        },
        {
          "level": 3,
          "title": "Object.entries()",
          "slug": "object-entries"
        },
        {
          "level": 3,
          "title": "Object.getOwnPropertyNames()",
          "slug": "object-getownpropertynames"
        },
        {
          "level": 3,
          "title": "Object.getOwnPropertySymbols()",
          "slug": "object-getownpropertysymbols"
        },
        {
          "level": 2,
          "title": "迭代器",
          "slug": "迭代器"
        },
        {
          "level": 3,
          "title": "生成器",
          "slug": "生成器"
        },
        {
          "level": 3,
          "title": "传递参数",
          "slug": "传递参数"
        },
        {
          "level": 3,
          "title": "自定义可迭代对象",
          "slug": "自定义可迭代对象"
        },
        {
          "level": 3,
          "title": "用于可迭代对象的语法",
          "slug": "用于可迭代对象的语法"
        },
        {
          "level": 2,
          "title": "对象属性",
          "slug": "对象属性"
        },
        {
          "level": 3,
          "title": "数据属性",
          "slug": "数据属性"
        },
        {
          "level": 3,
          "title": "访问器属性",
          "slug": "访问器属性"
        },
        {
          "level": 3,
          "title": "修改属性的特性",
          "slug": "修改属性的特性"
        },
        {
          "level": 3,
          "title": "与属性有关的方法",
          "slug": "与属性有关的方法"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"循环、迭代、属性的特性与属性方法\"><a class=\"header-anchor\" href=\"#循环、迭代、属性的特性与属性方法\">#</a> 循环、迭代、属性的特性与属性方法</h1>\n<h1 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>这是一篇比较杂的总结，主要涵盖了循环相关、获取对象属性、迭代器生成、以及对象属性的特性（可枚举，访问器属性、<code>Object.defineProperty</code> 等等）和相关方法。</p>\n"
    },
    {
      "title": "总结自己所遇到过的布局问题",
      "frontmatter": {
        "meta": [
          {
            "title": "总结自己所遇到过的布局问题",
            "time": "2019-07-05T19:19:28.000Z",
            "tag": "html,css"
          }
        ]
      },
      "regularPath": "/blog/web/%E6%80%BB%E7%BB%93%E8%87%AA%E5%B7%B1%E6%89%80%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%B8%83%E5%B1%80%E9%97%AE%E9%A2%98.html",
      "relativePath": "blog/web/总结自己所遇到过的布局问题.md",
      "key": "v-ae2807da",
      "path": "/blog/web/%E6%80%BB%E7%BB%93%E8%87%AA%E5%B7%B1%E6%89%80%E9%81%87%E5%88%B0%E8%BF%87%E7%9A%84%E5%B8%83%E5%B1%80%E9%97%AE%E9%A2%98.html",
      "headers": [
        {
          "level": 2,
          "title": "三栏布局",
          "slug": "三栏布局"
        },
        {
          "level": 3,
          "title": "table",
          "slug": "table"
        },
        {
          "level": 3,
          "title": "table 标签（display:table）",
          "slug": "table-标签（display-table）"
        },
        {
          "level": 3,
          "title": "tr 标签（display:table-row）",
          "slug": "tr-标签（display-table-row）"
        },
        {
          "level": 3,
          "title": "td 标签（display:table-cell）",
          "slug": "td-标签（display-table-cell）"
        },
        {
          "level": 3,
          "title": "浮动",
          "slug": "浮动"
        },
        {
          "level": 3,
          "title": "margin",
          "slug": "margin"
        },
        {
          "level": 3,
          "title": "BFC",
          "slug": "bfc"
        },
        {
          "level": 3,
          "title": "float+BFC",
          "slug": "float-bfc"
        },
        {
          "level": 3,
          "title": "float+margin",
          "slug": "float-margin"
        },
        {
          "level": 3,
          "title": "圣杯布局",
          "slug": "圣杯布局"
        },
        {
          "level": 3,
          "title": "双飞翼布局",
          "slug": "双飞翼布局"
        },
        {
          "level": 3,
          "title": "display:table-cell",
          "slug": "display-table-cell"
        },
        {
          "level": 2,
          "title": "水平垂直居中",
          "slug": "水平垂直居中"
        },
        {
          "level": 3,
          "title": "关于 vertical-align",
          "slug": "关于-vertical-align"
        },
        {
          "level": 3,
          "title": "关于 line-height",
          "slug": "关于-line-height"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 3,
          "title": "水平居中",
          "slug": "水平居中"
        },
        {
          "level": 3,
          "title": "垂直居中",
          "slug": "垂直居中"
        },
        {
          "level": 3,
          "title": "水平垂直居中布局",
          "slug": "水平垂直居中布局"
        },
        {
          "level": 3,
          "title": "浮动元素的居中",
          "slug": "浮动元素的居中"
        },
        {
          "level": 3,
          "title": "延伸：inline-block 和 float",
          "slug": "延伸：inline-block-和-float"
        },
        {
          "level": 2,
          "title": "等宽、等间距、两端对齐布局",
          "slug": "等宽、等间距、两端对齐布局"
        },
        {
          "level": 2,
          "title": "等高布局",
          "slug": "等高布局"
        },
        {
          "level": 2,
          "title": "绝对定位滚动条问题",
          "slug": "绝对定位滚动条问题"
        },
        {
          "level": 2,
          "title": "fixed 定位问题",
          "slug": "fixed-定位问题"
        },
        {
          "level": 2,
          "title": "table",
          "slug": "table-2"
        },
        {
          "level": 2,
          "title": "隐藏滚动条",
          "slug": "隐藏滚动条"
        },
        {
          "level": 2,
          "title": "粘性定位",
          "slug": "粘性定位"
        }
      ],
      "excerpt": "<h1 id=\"总结自己所遇到过的布局问题\"><a class=\"header-anchor\" href=\"#总结自己所遇到过的布局问题\">#</a> 总结自己所遇到过的布局问题</h1>\n<h2 id=\"三栏布局\"><a class=\"header-anchor\" href=\"#三栏布局\">#</a> 三栏布局</h2>\n<h3 id=\"table\"><a class=\"header-anchor\" href=\"#table\">#</a> table</h3>\n<h3 id=\"table-标签（display-table）\"><a class=\"header-anchor\" href=\"#table-标签（display-table）\">#</a> table 标签（display:table）</h3>\n<ol>\n<li>table 可设置宽高、margin、border、padding 等属性。属性值的单位可以使用 px，百分比值。</li>\n<li>table 的宽度默认由内容的宽高撑开，如果 table 设置了宽度，宽度默认被它里面的 td 平均分，如果给某一个 td 设置宽度，那么 table 剩余的宽度会被其他的 td 平均分（有点类似 flex 布局）。</li>\n<li>给 table 设置的高度起到的作用只是 min-height 的作用，当内容的高度高于设置的高度时，table 的高度会被撑高。</li>\n</ol>\n"
    },
    {
      "title": "拖拽排序",
      "frontmatter": {
        "meta": [
          {
            "title": "拖拽排序",
            "time": "2020-6-15 10:3:30",
            "tag": "js,拖拽"
          }
        ]
      },
      "regularPath": "/blog/web/%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F.html",
      "relativePath": "blog/web/拖拽排序.md",
      "key": "v-e7cffb24",
      "path": "/blog/web/%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "如何排序",
          "slug": "如何排序"
        },
        {
          "level": 2,
          "title": "相关事件",
          "slug": "相关事件"
        },
        {
          "level": 3,
          "title": "mouse 事件",
          "slug": "mouse-事件"
        },
        {
          "level": 3,
          "title": "drag 事件",
          "slug": "drag-事件"
        },
        {
          "level": 3,
          "title": "touch 事件",
          "slug": "touch-事件"
        },
        {
          "level": 2,
          "title": "动画",
          "slug": "动画"
        },
        {
          "level": 3,
          "title": "动画完插入节点",
          "slug": "动画完插入节点"
        },
        {
          "level": 3,
          "title": "插入节点后动画",
          "slug": "插入节点后动画"
        },
        {
          "level": 2,
          "title": "拖拽时滚动",
          "slug": "拖拽时滚动"
        },
        {
          "level": 2,
          "title": "列表组合",
          "slug": "列表组合"
        }
      ],
      "excerpt": "<h1 id=\"拖拽排序\"><a class=\"header-anchor\" href=\"#拖拽排序\">#</a> 拖拽排序</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在做一个移动端项目时，有用到拖拽列表元素，为列表排序的地方。在其中也遇到了很多问题，和学到了很多新知识点，在这里做一个总结。</p>\n<p>本文将从事件，排序方法，动画方法，性能，列表联动等几个方面一一描述。</p>\n"
    },
    {
      "title": "文字走马灯",
      "frontmatter": {
        "meta": [
          {
            "title": "文字走马灯",
            "time": "2020-06-25T19:19:28.000Z",
            "tag": "js,css"
          }
        ]
      },
      "regularPath": "/blog/web/%E6%96%87%E5%AD%97%E8%B5%B0%E9%A9%AC%E7%81%AF.html",
      "relativePath": "blog/web/文字走马灯.md",
      "key": "v-65e02d6f",
      "path": "/blog/web/%E6%96%87%E5%AD%97%E8%B5%B0%E9%A9%AC%E7%81%AF.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "css3 动画",
          "slug": "css3-动画"
        },
        {
          "level": 2,
          "title": "js 实现",
          "slug": "js-实现"
        },
        {
          "level": 2,
          "title": "源码",
          "slug": "源码"
        }
      ],
      "excerpt": "<h1 id=\"文字走马灯\"><a class=\"header-anchor\" href=\"#文字走马灯\">#</a> 文字走马灯</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>项目需要使用到文字滚动显示，搜索后发现 <code>&lt;marquee&gt;</code> 标签可以实现，但无奈已经废弃，就只有自己去实现，大概有 2 种方法：</p>\n<ol>\n<li>使用 <code>css3</code> 动画。</li>\n<li>用 <code>js</code> 实现。</li>\n</ol>\n"
    },
    {
      "title": "文字超出省略",
      "frontmatter": {
        "meta": [
          {
            "title": "文字超出省略",
            "time": "2020-03-25T19:19:28.000Z",
            "tag": "css"
          }
        ]
      },
      "regularPath": "/blog/web/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5.html",
      "relativePath": "blog/web/文字超出省略.md",
      "key": "v-3b153825",
      "path": "/blog/web/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "超过行数省略",
          "slug": "超过行数省略"
        },
        {
          "level": 3,
          "title": "单行超出省略",
          "slug": "单行超出省略"
        },
        {
          "level": 3,
          "title": "多行超出省略",
          "slug": "多行超出省略"
        },
        {
          "level": 2,
          "title": "超出字数省略",
          "slug": "超出字数省略"
        },
        {
          "level": 2,
          "title": "英文换行问题",
          "slug": "英文换行问题"
        }
      ],
      "excerpt": "<h1 id=\"文字超出省略\"><a class=\"header-anchor\" href=\"#文字超出省略\">#</a> 文字超出省略</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>文字的超出省略，有以下几种形式：</p>\n<ol>\n<li>超过一定行数后省略。\n<ul>\n<li>单行超出省略</li>\n<li>多行超出省略</li>\n</ul>\n</li>\n<li>超过一定字数后隐藏。</li>\n</ol>\n"
    },
    {
      "title": "浏览器渲染以及 css、js 阻塞",
      "frontmatter": {
        "meta": [
          {
            "title": "浏览器渲染以及 css、js 阻塞",
            "time": "2019-07-31T07:42:53.000Z",
            "tag": "html"
          }
        ]
      },
      "regularPath": "/blog/web/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E4%BB%A5%E5%8F%8Acss%E3%80%81js%E9%98%BB%E5%A1%9E.html",
      "relativePath": "blog/web/浏览器渲染以及css、js阻塞.md",
      "key": "v-73fdbc72",
      "path": "/blog/web/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E4%BB%A5%E5%8F%8Acss%E3%80%81js%E9%98%BB%E5%A1%9E.html",
      "headers": [
        {
          "level": 2,
          "title": "浏览器渲染流程",
          "slug": "浏览器渲染流程"
        },
        {
          "level": 2,
          "title": "css 阻塞",
          "slug": "css-阻塞"
        },
        {
          "level": 2,
          "title": "js 阻塞",
          "slug": "js-阻塞"
        },
        {
          "level": 3,
          "title": "async 和 defer 脚本",
          "slug": "async-和-defer-脚本"
        },
        {
          "level": 3,
          "title": "普通 script",
          "slug": "普通-script"
        },
        {
          "level": 3,
          "title": "不同脚本的区别",
          "slug": "不同脚本的区别"
        },
        {
          "level": 3,
          "title": "什么时候使用",
          "slug": "什么时候使用"
        },
        {
          "level": 3,
          "title": "js 执行时的阻塞",
          "slug": "js-执行时的阻塞"
        },
        {
          "level": 3,
          "title": "requestAnimationFrame 和渲染",
          "slug": "requestanimationframe-和渲染"
        },
        {
          "level": 3,
          "title": "dom 事件",
          "slug": "dom-事件"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "DOMContentLoaded 事件",
          "slug": "domcontentloaded-事件"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"浏览器渲染以及-css、js-阻塞\"><a class=\"header-anchor\" href=\"#浏览器渲染以及-css、js-阻塞\">#</a> 浏览器渲染以及 css、js 阻塞</h1>\n<h2 id=\"浏览器渲染流程\"><a class=\"header-anchor\" href=\"#浏览器渲染流程\">#</a> 浏览器渲染流程</h2>\n<p>浏览器获得一个 html 文档后，渲染的过程如下：</p>\n<ol>\n<li>解析 dom，生成 DOM Tree，解析 CSS 文件生成 CSSOM Tree</li>\n<li>生成 render 树，将 DOM Tree 和 CSSOM Tree 合并</li>\n<li>布局 render 树，计算各元素尺寸、位置等</li>\n<li>绘制 render 树，绘制页面的像素信息</li>\n<li>合成（composite），GPU 会将各层合成（composite），显示在屏幕上</li>\n</ol>\n"
    },
    {
      "title": "滑动选择器",
      "frontmatter": {
        "meta": [
          {
            "title": "滑动选择器",
            "time": "2020-03-18T10:14:21.000Z",
            "tag": "js"
          }
        ]
      },
      "regularPath": "/blog/web/%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%99%A8.html",
      "relativePath": "blog/web/滑动选择器.md",
      "key": "v-48e86fc7",
      "path": "/blog/web/%E6%BB%91%E5%8A%A8%E9%80%89%E6%8B%A9%E5%99%A8.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "如何滑动",
          "slug": "如何滑动"
        },
        {
          "level": 2,
          "title": "添加选择框",
          "slug": "添加选择框"
        },
        {
          "level": 2,
          "title": "添加事件",
          "slug": "添加事件"
        },
        {
          "level": 2,
          "title": "修正位置",
          "slug": "修正位置"
        },
        {
          "level": 2,
          "title": "类的方式实现",
          "slug": "类的方式实现"
        },
        {
          "level": 3,
          "title": "dom 结构",
          "slug": "dom-结构"
        },
        {
          "level": 3,
          "title": "事件控制",
          "slug": "事件控制"
        },
        {
          "level": 3,
          "title": "配置选项",
          "slug": "配置选项"
        },
        {
          "level": 3,
          "title": "获取列表元素信息",
          "slug": "获取列表元素信息"
        },
        {
          "level": 3,
          "title": "选择框",
          "slug": "选择框"
        },
        {
          "level": 3,
          "title": "获取元素位置和索引",
          "slug": "获取元素位置和索引"
        },
        {
          "level": 3,
          "title": "滑动",
          "slug": "滑动"
        },
        {
          "level": 3,
          "title": "使用",
          "slug": "使用"
        },
        {
          "level": 3,
          "title": "源码",
          "slug": "源码"
        }
      ],
      "excerpt": "<h1 id=\"滑动选择器\"><a class=\"header-anchor\" href=\"#滑动选择器\">#</a> 滑动选择器</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>要实现如以下的选择器，可以上下滑动，获取选择的值。</p>\n<p><img src=\"https://fireli-1256465711.cos.ap-chengdu.myqcloud.com/img/1584845677570.png\" alt=\"\"></p>\n"
    },
    {
      "title": "监听 dom 的变化",
      "frontmatter": {
        "meta": [
          {
            "title": "监听dom的变化",
            "time": "2019-10-20T19:19:28.000Z",
            "tag": "html"
          }
        ]
      },
      "regularPath": "/blog/web/%E7%9B%91%E5%90%ACdom%E7%9A%84%E5%8F%98%E5%8C%96.html",
      "relativePath": "blog/web/监听dom的变化.md",
      "key": "v-82555ff0",
      "path": "/blog/web/%E7%9B%91%E5%90%ACdom%E7%9A%84%E5%8F%98%E5%8C%96.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "resize 事件",
          "slug": "resize-事件"
        },
        {
          "level": 2,
          "title": "MutationObserver",
          "slug": "mutationobserver"
        },
        {
          "level": 2,
          "title": "动画",
          "slug": "动画"
        },
        {
          "level": 2,
          "title": "过渡",
          "slug": "过渡"
        },
        {
          "level": 2,
          "title": "滚动",
          "slug": "滚动"
        },
        {
          "level": 3,
          "title": "监听变大",
          "slug": "监听变大"
        },
        {
          "level": 3,
          "title": "监听变小",
          "slug": "监听变小"
        },
        {
          "level": 3,
          "title": "类封装",
          "slug": "类封装"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"监听-dom-的变化\"><a class=\"header-anchor\" href=\"#监听-dom-的变化\">#</a> 监听 dom 的变化</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在写一些通用的组件库时，总希望组件能宽高自适应，来使组件有更好的表现。但 dom 的大小是无法直接监听的，在搜索的过程中，发现一些方法可以做到监听页面变化，在这里做一个总结，内容包括：</p>\n<ol>\n<li><code>resize</code> 事件。</li>\n<li><code>MutationObserver</code> 观察属性变化。</li>\n<li>通过动画监听节点添加。</li>\n<li>通过过渡监听元素大小变化。（只适用于元素大小直接改变）</li>\n<li>通过滚动监听元素大小变化。（完美）</li>\n</ol>\n"
    },
    {
      "title": "移动端适配学习与总结",
      "frontmatter": {
        "meta": [
          {
            "title": "移动端适配学习与总结",
            "time": "2019-06-23T09:38:32.000Z",
            "tag": "移动端,布局"
          }
        ]
      },
      "regularPath": "/blog/web/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93.html",
      "relativePath": "blog/web/移动端适配学习与总结.md",
      "key": "v-16c4aa7d",
      "path": "/blog/web/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93.html",
      "headers": [
        {
          "level": 2,
          "title": "一些基本概念",
          "slug": "一些基本概念"
        },
        {
          "level": 3,
          "title": "设备像素",
          "slug": "设备像素"
        },
        {
          "level": 3,
          "title": "设备独立像素",
          "slug": "设备独立像素"
        },
        {
          "level": 3,
          "title": "设备像素比",
          "slug": "设备像素比"
        },
        {
          "level": 3,
          "title": "pt/dp",
          "slug": "pt-dp"
        },
        {
          "level": 3,
          "title": "PPI",
          "slug": "ppi"
        },
        {
          "level": 3,
          "title": "Retina 屏幕",
          "slug": "retina-屏幕"
        },
        {
          "level": 2,
          "title": "网易的适配方案",
          "slug": "网易的适配方案"
        },
        {
          "level": 2,
          "title": "淘宝的适配方案（Flexible）",
          "slug": "淘宝的适配方案（flexible）"
        },
        {
          "level": 3,
          "title": "原理",
          "slug": "原理"
        },
        {
          "level": 3,
          "title": "疑惑",
          "slug": "疑惑"
        },
        {
          "level": 2,
          "title": "一般通用 rem 方法",
          "slug": "一般通用-rem-方法"
        },
        {
          "level": 3,
          "title": "方案一",
          "slug": "方案一"
        },
        {
          "level": 3,
          "title": "方案二",
          "slug": "方案二"
        },
        {
          "level": 2,
          "title": "新的 vw、vh 方案",
          "slug": "新的-vw、vh-方案"
        },
        {
          "level": 3,
          "title": "原理",
          "slug": "原理-2"
        },
        {
          "level": 3,
          "title": "不足",
          "slug": "不足"
        },
        {
          "level": 2,
          "title": "方案总结",
          "slug": "方案总结"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"移动端适配学习与总结\"><a class=\"header-anchor\" href=\"#移动端适配学习与总结\">#</a> 移动端适配学习与总结</h1>\n<h2 id=\"一些基本概念\"><a class=\"header-anchor\" href=\"#一些基本概念\">#</a> 一些基本概念</h2>\n<h3 id=\"设备像素\"><a class=\"header-anchor\" href=\"#设备像素\">#</a> 设备像素</h3>\n<p>又称物理像素，是显示设备中一个最微小的物理部件。屏幕显示就是由一个个物理像素组成。常说的分辨率<code>1080*1920</code>就是指物理像素。</p>\n<h3 id=\"设备独立像素\"><a class=\"header-anchor\" href=\"#设备独立像素\">#</a> 设备独立像素</h3>\n<p>与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，CSS 像素就是一种设备独立像素。</p>\n"
    },
    {
      "title": "自定义事件",
      "frontmatter": {
        "meta": [
          {
            "title": "自定义事件",
            "time": "2019-10-29:19:28",
            "tag": "html"
          }
        ]
      },
      "regularPath": "/blog/web/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6.html",
      "relativePath": "blog/web/自定义事件.md",
      "key": "v-57b46da2",
      "path": "/blog/web/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "CustomEvent 接口",
          "slug": "customevent-接口"
        },
        {
          "level": 3,
          "title": "用法",
          "slug": "用法"
        },
        {
          "level": 3,
          "title": "实例：自定义滑动事件",
          "slug": "实例：自定义滑动事件"
        },
        {
          "level": 3,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "nodejs 中的事件",
          "slug": "nodejs-中的事件"
        },
        {
          "level": 2,
          "title": "简易实现的事件分发监听",
          "slug": "简易实现的事件分发监听"
        },
        {
          "level": 2,
          "title": "参考文献",
          "slug": "参考文献"
        }
      ],
      "excerpt": "<h1 id=\"自定义事件\"><a class=\"header-anchor\" href=\"#自定义事件\">#</a> 自定义事件</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><code>dom</code> 的原生事件有时并不能满足需求，比如长按事件、封装原生事件，或者各种自定义事件，这些并没有直接的 <code>api</code> 去使用。</p>\n<p><code>CustomEvent()</code>允许为 <code>dom</code> 创建自定义事件，这些事件可以像原生事件那样冒泡或取消。</p>\n<p>另外，事件分发机制在代码中也会广泛用到，比如延迟函数结束、或某些代码执行完毕时分发事件，这样可以在其他地方监听事件并执行函数。</p>\n"
    },
    {
      "title": "自定义单选框组件",
      "frontmatter": {
        "meta": [
          {
            "title": "自定义单选框组件",
            "time": "2019-10-20T19:19:28.000Z",
            "tag": "vue,组件"
          }
        ]
      },
      "regularPath": "/blog/web/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E9%80%89%E6%A1%86%E7%BB%84%E4%BB%B6.html",
      "relativePath": "blog/web/自定义单选框组件.md",
      "key": "v-26a3239e",
      "path": "/blog/web/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E9%80%89%E6%A1%86%E7%BB%84%E4%BB%B6.html",
      "excerpt": "<h1 id=\"自定义单选框组件\"><a class=\"header-anchor\" href=\"#自定义单选框组件\">#</a> 自定义单选框组件</h1>\n<p>一个单选框组件：</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RadioGroup</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filterValue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@change</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>handleFilterChange<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Radio</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>day<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {{ this.$t('word.day1') }}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Radio</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Radio</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>week<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {{ this.$t('word.week') }}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Radio</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Radio</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>month<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {{ this.$t('word.month') }}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Radio</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Radio</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>customize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {{ this.$t('word.customize') }}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Radio</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RadioGroup</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p><code>RadioGroup</code> 可以双向绑定值和监听 <code>change</code> 事件。类似于原生的 <code>select</code> 框。</p>\n"
    },
    {
      "title": "虚拟 dom 和组件",
      "frontmatter": {
        "meta": [
          {
            "title": "虚拟dom和组件",
            "time": "2019-11-15T17:24:43.000Z",
            "tag": "vue,组件"
          }
        ]
      },
      "regularPath": "/blog/web/%E8%99%9A%E6%8B%9Fdom%E5%92%8C%E7%BB%84%E4%BB%B6.html",
      "relativePath": "blog/web/虚拟dom和组件.md",
      "key": "v-3fe3907f",
      "path": "/blog/web/%E8%99%9A%E6%8B%9Fdom%E5%92%8C%E7%BB%84%E4%BB%B6.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "ToolTip 组件",
          "slug": "tooltip-组件"
        },
        {
          "level": 2,
          "title": "组件的注册",
          "slug": "组件的注册"
        },
        {
          "level": 2,
          "title": "渲染函数",
          "slug": "渲染函数"
        },
        {
          "level": 2,
          "title": "实现 ToolTip 组件",
          "slug": "实现-tooltip-组件"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "excerpt": "<h1 id=\"虚拟-dom-和组件\"><a class=\"header-anchor\" href=\"#虚拟-dom-和组件\">#</a> 虚拟 dom 和组件</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在 vue 项目中，我想实现一个点击目标元素，在目标元素周围弹出框的功能。</p>\n<p><img src=\"https://fireli-1256465711.cos.ap-chengdu.myqcloud.com/img/1592994223548.png\" alt=\"enter description here\"></p>\n<p>像这样，点击按钮，在下面弹出菜单栏。</p>\n<p>原理很简单，点击时获取目标位置，在目标下方插入菜单栏就行了。</p>\n<p>那么这应该怎么封装成一个组件呢？</p>\n"
    },
    {
      "title": "透明性组件",
      "frontmatter": {
        "meta": [
          {
            "title": "透明性组件",
            "time": "2019-12-04T19:19:28.000Z",
            "tag": "vue,组件"
          }
        ]
      },
      "regularPath": "/blog/web/%E9%80%8F%E6%98%8E%E6%80%A7%E7%BB%84%E4%BB%B6.html",
      "relativePath": "blog/web/透明性组件.md",
      "key": "v-36e64d02",
      "path": "/blog/web/%E9%80%8F%E6%98%8E%E6%80%A7%E7%BB%84%E4%BB%B6.html",
      "headers": [
        {
          "level": 2,
          "title": "需要解决的问题",
          "slug": "需要解决的问题"
        },
        {
          "level": 2,
          "title": "$attrs 和 $listeners",
          "slug": "attrs-和-listeners"
        },
        {
          "level": 2,
          "title": "vNode",
          "slug": "vnode"
        },
        {
          "level": 2,
          "title": "函数式组件",
          "slug": "函数式组件"
        }
      ],
      "excerpt": "<h1 id=\"透明性组件\"><a class=\"header-anchor\" href=\"#透明性组件\">#</a> 透明性组件</h1>\n<h2 id=\"需要解决的问题\"><a class=\"header-anchor\" href=\"#需要解决的问题\">#</a> 需要解决的问题</h2>\n<p>对于一些组件，比如输入框，我们会对它进行封装，例如：</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- customInput组件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>icon</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>当我使用这个组件时，可能发生如下的情况：</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- 父组件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>customInput</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>input<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>customInput</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>这时，我们需要在 customInput 组件中对每一个属性进行手动绑定。</p>\n"
    },
    {
      "title": "说明",
      "frontmatter": {},
      "regularPath": "/doc/",
      "relativePath": "doc/index.md",
      "key": "v-0123048a",
      "path": "/doc/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/0/",
      "relativePath": "tag/0/README.md",
      "key": "v-1ed23a52",
      "path": "/tag/0/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/2/",
      "relativePath": "tag/2/README.md",
      "key": "v-b0140264",
      "path": "/tag/2/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/1/",
      "relativePath": "tag/1/README.md",
      "key": "v-3937c6e0",
      "path": "/tag/1/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/3/",
      "relativePath": "tag/3/README.md",
      "key": "v-6c87e10c",
      "path": "/tag/3/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/4/",
      "relativePath": "tag/4/README.md",
      "key": "v-3119c34a",
      "path": "/tag/4/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/5/",
      "relativePath": "tag/5/README.md",
      "key": "v-14a8b4f0",
      "path": "/tag/5/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/6/",
      "relativePath": "tag/6/README.md",
      "key": "v-8b84f074",
      "path": "/tag/6/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/7/",
      "relativePath": "tag/7/README.md",
      "key": "v-7ecf6a04",
      "path": "/tag/7/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/9/",
      "relativePath": "tag/9/README.md",
      "key": "v-07f32e80",
      "path": "/tag/9/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/",
      "relativePath": "tag/README.md",
      "key": "v-8c9d11d8",
      "path": "/tag/"
    },
    {
      "frontmatter": {},
      "regularPath": "/tool/",
      "relativePath": "tool/README.md",
      "key": "v-223ae75a",
      "path": "/tool/"
    },
    {
      "frontmatter": {},
      "regularPath": "/web/",
      "relativePath": "web/README.md",
      "key": "v-3b92a8c0",
      "path": "/web/"
    },
    {
      "title": "canvas 保存下载图片",
      "frontmatter": {
        "meta": [
          {
            "title": "canvas保存下载图片",
            "time": "2020-03-15T09:38:32.000Z",
            "tag": "图片下载,canvas"
          }
        ]
      },
      "regularPath": "/doc/canvas%E4%BF%9D%E5%AD%98%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87.html",
      "relativePath": "doc/canvas保存下载图片.md",
      "key": "v-7e5ff7fd",
      "path": "/doc/canvas%E4%BF%9D%E5%AD%98%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87.html",
      "headers": [
        {
          "level": 2,
          "title": "前言",
          "slug": "前言"
        },
        {
          "level": 2,
          "title": "canvas 转化为图片",
          "slug": "canvas-转化为图片"
        },
        {
          "level": 2,
          "title": "canvas 与 retina 屏",
          "slug": "canvas-与-retina-屏"
        },
        {
          "level": 2,
          "title": "html2canvas",
          "slug": "html2canvas"
        },
        {
          "level": 2,
          "title": "下载图片",
          "slug": "下载图片"
        },
        {
          "level": 2,
          "title": "Blob 对象",
          "slug": "blob-对象"
        },
        {
          "level": 2,
          "title": "data URL 和 Blob 转换",
          "slug": "data-url-和-blob-转换"
        },
        {
          "level": 2,
          "title": "URL.createObjectURL()",
          "slug": "url-createobjecturl"
        },
        {
          "level": 2,
          "title": "IE 10",
          "slug": "ie-10"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        },
        {
          "level": 2,
          "title": "问题",
          "slug": "问题"
        },
        {
          "level": 2,
          "title": "参考资料：",
          "slug": "参考资料："
        }
      ],
      "excerpt": "<h1 id=\"canvas-保存下载图片\"><a class=\"header-anchor\" href=\"#canvas-保存下载图片\">#</a> canvas 保存下载图片</h1>\n<h2 id=\"前言\"><a class=\"header-anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在项目中遇到了截取屏幕区域，并转化为图片下载的问题，这里做一个小小的总结，主要包括以下几个内容：</p>\n<ol>\n<li><code>dom</code> 节点通过 <code>html2canvas</code> 转化为 <code>canvas</code></li>\n<li><code>canvas</code> 转化图片</li>\n<li>图片通过 <code>a</code> 标签下载</li>\n</ol>\n"
    },
    {
      "frontmatter": {},
      "regularPath": "/tag/8/",
      "relativePath": "tag/8/README.md",
      "key": "v-43614c42",
      "path": "/tag/8/"
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "首页",
        "link": "/"
      },
      {
        "text": "Web开发",
        "link": "/web/"
      },
      {
        "text": "工具使用",
        "link": "/tool/"
      },
      {
        "text": "微代码",
        "link": "/doc/"
      }
    ],
    "editLinks": false,
    "sidebar": "auto",
    "sidebarDepth": 3,
    "fileDocSidebar": [
      [
        "/doc/",
        "说明"
      ],
      [
        "/doc/canvas保存下载图片",
        "canvas保存下载图片"
      ]
    ]
  }
}